name: Simple MatchingServer CI/CD

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'MatchingServer/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: 서버 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SSH_PORT }}
          script: |
            # 레포지토리 루트 디렉토리로 이동
            cd ${{ secrets.DEV_DEPLOY_PATH }}/../
            
            # 현재 브랜치 확인 및 pull
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            echo "Current branch: $CURRENT_BRANCH"
            
            # 로컬 변경사항 저장 (있는 경우)
            git stash
            
            # main 또는 dev 브랜치에서 최신 코드 가져오기
            if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "dev" ]; then
              echo "Checking out dev branch..."
              git checkout dev
            fi
            
            # 최신 코드 가져오기
            git pull origin $CURRENT_BRANCH
            
            # 변경 사항 확인
            if git diff --name-only HEAD@{1} HEAD | grep -q 'MatchingServer/'; then
              echo "변경 사항이 MatchingServer 디렉토리에서 감지되었습니다."
              
              # MatchingServer 디렉토리로 이동 후 빌드 스크립트 실행
              cd MatchingServer
              chmod +x build.sh
              ./build.sh
              
              # 추가 로그 표시 (더 많은 컨텍스트 제공)
              echo "===== 배포 상태 확인 ====="
              echo "서버 프로세스:"
              pgrep -fl MatchingServer
              
              echo "최근 로그 (10줄):"
              tail -n 10 logs/server_latest.log
              
              echo "===== 배포 완료 ====="
            else
              echo "MatchingServer 디렉토리에 변경 사항이 없습니다."
            fi