cmake_minimum_required(VERSION 3.12)
project(GatewaySerevr)

# C++17 표준 사용
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 중요: fmt와 spdlog를 헤더 전용으로 사용
add_definitions(
    -DFMT_HEADER_ONLY      # fmt를 헤더 전용으로 사용
    -DSPDLOG_FMT_EXTERNAL  # spdlog가 외부 fmt를 사용하도록 설정
    -DSPDLOG_HEADER_ONLY   # spdlog도 헤더 전용으로 사용
    -D_WIN32_WINNT=0x0601  # Windows 7 이상 대상
)

# Visual Studio 관련 컴파일러 옵션 설정
if(MSVC)
    # UTF-8 지원 추가
    # add_compile_options(/utf-8)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /source-charset:utf-8 /execution-charset:utf-8")
    add_compile_options(/wd4819)  # 코드 페이지 경고 무시
    
    # 추가 경고 억제
    add_compile_options(/wd4819)  # 코드 페이지 경고 무시
    add_compile_options(/wd4996)  # 보안 경고 억제
    add_compile_options(/wd4267)  # 'size_t'에서 'type'으로의 변환 가능 데이터 손실 경고 억제
    add_compile_options(/wd4828)  # 잘못된 문자 경고(C4828) 무시
    add_compile_options(/wd4005)  # 매크로 재정의 경고(C4005) 무시
    add_compile_options(/wd5030)  # [[assume]] 특성 인식 불가(C5030) 무시
    add_compile_options(/wd4038)  # C++20 이상에서만 사용 가능한 기능 경고(C4038) 무시
    
    # 전처리기 정의 추가
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_UNICODE -DUNICODE)
endif()

# 소스 디렉토리 설정
set(SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")
message(STATUS "Source directory: ${SRC_DIR}")

# vcpkg 설치 디렉토리 설정
set(VCPKG_INSTALLED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/vcpkg_installed/x64-windows")

# 소스 파일과 헤더 파일 명시적으로 나열
set(SOURCE_FILES
    "${SRC_DIR}/main.cpp"
    "${SRC_DIR}/core/api_gateway.cpp"
    
)

# 모든 헤더 디렉토리를 명시적으로 추가
set(INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}"
    "${SRC_DIR}/core"
    "${VCPKG_INSTALLED_DIR}/include"
)

# 실행 파일 추가
add_executable(${PROJECT_NAME} ${SOURCE_FILES} "src/core/service_registry.h")

# 인클루드 디렉토리 설정
target_include_directories(${PROJECT_NAME} PRIVATE ${INCLUDE_DIRS})

# 라이브러리 디렉토리 설정
target_link_directories(${PROJECT_NAME} PRIVATE
    "${VCPKG_INSTALLED_DIR}/lib"
)

# 라이브러리 파일 검색
file(GLOB BOOST_SYSTEM_LIBS "${VCPKG_INSTALLED_DIR}/lib/boost_system*.lib")

message(STATUS "Found Boost system libraries: ${BOOST_SYSTEM_LIBS}")

# 라이브러리 링크
target_link_libraries(${PROJECT_NAME} PRIVATE
    ${BOOST_SYSTEM_LIBS}
)

# 디버깅 정보 출력 - 파일 존재 확인
message(STATUS "Checking source files existence:")
foreach(SOURCE_FILE ${SOURCE_FILES})
    if(EXISTS "${SOURCE_FILE}")
        message(STATUS "  ${SOURCE_FILE} (exists)")
    else()
        message(STATUS "  ${SOURCE_FILE} (NOT FOUND)")
    endif()
endforeach()